name: CI test

on: [push, pull_request]

jobs:
  ci:
    name: ${{ matrix.os }} CI
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macOS-latest, ubuntu-18.04]
    
    steps:
      - uses: actions/checkout@v1

      - name: Install deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get remove php7.1-fpm php7.2-fpm php7.3-fpm php7.3-common
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install build-essential pkg-config libc6-dev m4 g++-multilib autoconf libtool libncurses-dev unzip git python zlib1g-dev wget bsdmainutils automake libboost-all-dev libssl-dev libprotobuf-dev protobuf-compiler libqrencode-dev libdb++-dev ntp ntpdate nano software-properties-common curl libevent-dev libcurl4-gnutls-dev cmake clang libsodium-dev -y
          sudo apt-get install python3.6 python3-pip python3-setuptools libgnutls28-dev
          pip3 install setuptools wheel
          pip3 install slick-bitcoinrpc pytest wget
          # params we will need for tests execution
          ./zcutil/fetch-params.sh
      
      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: |
          # flag for some CC tests transactions - so DO NOT USE THIS CI ARTIFACTS IN PRODUCTION!!!
          CONFIGURE_FLAGS='CPPFLAGS=-DTESTMODE' ./zcutil/build.sh -j$(nproc)
#       - name: Install deps (macOS)
#         if: runner.os == 'macOS'
#         run: |
#           brew update
#           brew upgrade
#           brew tap discoteq/discoteq; brew install flock
#           brew install autoconf autogen automake
#           brew install gcc@8
#           brew install binutils
#           brew install protobuf
#           brew install coreutils
#           brew install wget
#           brew install python3
#           pip3 install setuptools wheel slick-bitcoinrpc pytest wget
#           ./zcutil/fetch-params.sh
        
#       - name: Build (macOS)
#         if: runner.os == 'macOS'
#         run: |
#           # flag for some CC tests transactions - so DO NOT USE THIS CI ARTIFACTS IN PRODUCTION!!!
#           export CPATH=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/
#           CONFIGURE_FLAGS='CPPFLAGS=-DTESTMODE' ./zcutil/build-mac.sh -j4
#       - name: Run CC tests
#         if: runner.os == 'Linux' || runner.os == 'macOS'
      - name: Run CC tests
        if: runner.os == 'Linux'
        run: |
          cd qa/rpc-tests/cc_pytest
          ./ci_setup.sh

  job-win-build:

    name: Win Build
    runs-on: ubuntu-16.04

    steps:
    - uses: actions/checkout@v1
    - name: Build Win on Unix
      env:
        DEBIAN_FRONTEND: noninteractive
      if: runner.os == 'Linux'
      run: |
        sudo apt-get remove php5.6-fpm php7.0-fpm php7.1-fpm php7.2-fpm php7.3-fpm php7.3-common
        sudo apt-get update
        sudo apt-get upgrade -y
        sudo apt-get install build-essential pkg-config libc6-dev m4 g++-multilib autoconf libtool libncurses-dev unzip git python zlib1g-dev wget bsdmainutils automake libboost-all-dev libssl-dev libprotobuf-dev protobuf-compiler libqrencode-dev libdb++-dev ntp ntpdate nano software-properties-common curl libevent-dev libcurl4-gnutls-dev cmake clang libsodium-dev -y
        sudo apt-get install build-essential pkg-config libc6-dev m4 g++-multilib autoconf libtool ncurses-dev unzip git python python-zmq zlib1g-dev wget libcurl4-gnutls-dev bsdmainutils automake curl cmake mingw-w64
        curl https://sh.rustup.rs -sSf | sh -s -- -y
        source $HOME/.cargo/env
        rustup target add x86_64-pc-windows-gnu
        sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
        sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
        ./zcutil/build-win.sh -j 2
    - name: Upload komodod.exe as artifact
      uses: actions/upload-artifact@v1
      with:
        name: komodod.exe
        path: ./src/komodod.exe

  #TODO: windows tests 
